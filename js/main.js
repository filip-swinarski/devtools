(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _render_inspector = require('./modules/render_inspector.js');

var _load_styles = require('./modules/load_styles.js');

var _render_console = require('./modules/render_console.js');

var _console_listen = require('./modules/console_listen.js');

var _dt_console_api = require('./modules/dt_console_api.js');

var DTConsole = _interopRequireWildcard(_dt_console_api);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var body = document.body; /* main.js 0.1.0 27.03.2017 @ filip swinarski */

(0, _load_styles.loadStyles)();
(0, _render_inspector.renderInspector)(body);
(0, _render_console.renderConsole)(body);
// consoleListen();

window.DTConsole = DTConsole;

},{"./modules/console_listen.js":2,"./modules/dt_console_api.js":4,"./modules/load_styles.js":5,"./modules/render_console.js":6,"./modules/render_inspector.js":8}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.consoleListen = undefined;

var _render_console = require('./render_console.js');

var consoleListen = function consoleListen() {

	window.addEventListener('error', function (error) {

		var row = document.createElement('div');
		var errorMessage = document.createElement('span');
		var errorSource = document.createElement('span');
		var errorLineNo = document.createElement('span');
		var errorColumnNo = document.createElement('span');

		row.classList.add('console-row');
		errorMessage.classList.add('console-row');
		errorSource.classList.add('console-source');
		errorLineNo.classList.add('console-lineno');
		errorColumnNo.classList.add('console-columnno');

		errorMessage.innerHTML += error.message;
		errorSource.innerHTML += error.filename;
		errorLineNo.innerHTML += error.lineno;
		errorColumnNo.innerHTML += error.columnno;

		row.appendChild(errorMessage);
		row.appendChild(errorSource);
		row.appendChild(errorLineNo);
		row.appendChild(errorColumnNo);
		_render_console.consoleDisplay.appendChild(row);
	}, false);

	_render_console.consoleDisplay.addEventListener('log', function (e) {

		var row = document.createElement('div');
		var logMessage = document.createElement('span');

		logMessage.innerHTML += e.detail;

		row.classList.add('console-row');
		logMessage.classList.add('console-message');

		row.appendChild(logMessage);
		_render_console.consoleDisplay.appendChild(row);
	}, false);
}; /* console_listen.js, v. 0.1.0, 28.03.2017, @ filip-swinarski */

exports.consoleListen = consoleListen;

},{"./render_console.js":6}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.consoleLog = undefined;

var _render_console = require('./render_console.js');

var consoleLog = function consoleLog(msg) {

	var log = new CustomEvent('log', { detail: msg });

	_render_console.consoleDisplay.dispatchEvent(log);
}; /* console_log.js, v. 0.1.0, 28.03.2017, @ filip-swinarski */

exports.consoleLog = consoleLog;

},{"./render_console.js":6}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.log = undefined;

var _console_log = require('./console_log.js');

var log = function log(msg) {
	(0, _console_log.consoleLog)(msg);
}; /* dt_console_api.js, v. 0.1.0, 28.03.2017, @ filip-swinarski */

exports.log = log;

},{"./console_log.js":3}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
/* load _styles.js v. 0.1.0, 28.03.2017, @ filip-swinarski */

var loadStyles = function loadStyles() {

	var styles = document.createElement('link');

	styles.rel = 'stylesheet';
	styles.type = 'text/css';
	styles.media = 'screen';
	styles.href = './css/main.css';
	document.getElementsByTagName('head')[0].appendChild(styles);
};

exports.loadStyles = loadStyles;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.consoleDisplay = exports.renderConsole = undefined;

var _console_listen = require('./console_listen');

var consoleDisplay = document.createElement('div'); /* render_console.js, v. 0.1.0, 28.03.2017, @ filip-swinarski */

consoleDisplay.classList.add('display');
consoleDisplay.id = 'console_display';

var renderConsole = function renderConsole(body) {

	body.appendChild(consoleDisplay);
	(0, _console_listen.consoleListen)();
};

exports.renderConsole = renderConsole;
exports.consoleDisplay = consoleDisplay;

},{"./console_listen":2}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
/* render_dom.js, v. 0.1.4, 29.03.2017, @ filip-swinarski */

var renderDOM = function renderDOM(elem, parentEl, level) {

	if (elem.id === 'inspector_display') return;

	var wrapper = document.createElement('div');
	var row1 = document.createElement('div');
	var row2 = elem.children.length ? document.createElement('div') : document.createElement('span');

	row1.classList.add('inspector__row');
	row1.classList.add('inspector__row--opening');

	row2.classList.add('inspector__row');
	row2.classList.add('inspector__row--closing');

	var row1ElementTypeSpan = document.createElement('span');
	var row1OpenArrow = document.createElement('span');
	var row1CloseArrow = document.createElement('span');
	var row2ElementTypeSpan = document.createElement('span');
	var row2OpenArrow = document.createElement('span');
	var row2CloseArrow = document.createElement('span');

	row1ElementTypeSpan.classList.add('inspector__tag-name');
	row2ElementTypeSpan.classList.add('inspector__tag-name');
	row1OpenArrow.innerText = '<';
	row1CloseArrow.innerText = '>';
	row1ElementTypeSpan.innerText = elem.localName;
	row1.appendChild(row1OpenArrow);
	row1.appendChild(row1ElementTypeSpan);

	if (elem.attributes.length) {
		[].slice.call(elem.attributes).forEach(function (attr) {

			var attrNameSpan = document.createElement('span');
			var attrEqualSpan = document.createElement('span');
			var attrValueSpan = document.createElement('span');

			attrNameSpan.classList.add('inspector__attr-name');
			attrValueSpan.classList.add('inspector__attr-value');
			attrNameSpan.innerText = ' ' + attr.localName;
			attrEqualSpan.innerText = '=';
			attrValueSpan.innerText = '"' + attr.value + '"';
			row1.appendChild(attrNameSpan);
			row1.appendChild(attrEqualSpan);
			row1.appendChild(attrValueSpan);
		});
	}

	row1.appendChild(row1CloseArrow);
	wrapper.appendChild(row1);
	wrapper.classList.add('inspector__exp');

	if (elem.text && elem.text.length) {

		var textEl = document.createElement('div');

		textEl.classList.add('inspector__exp');
		textEl.innerText = elem.text.trim();
		wrapper.appendChild(textEl);

		if (level < 2) row1.classList.add('inspector__row--expanded');else row1.classList.add('inspector__row--collapsed');
	}

	if (elem.children.length) level += 1;
	[].slice.call(elem.children).forEach(function (el) {
		renderDOM(el, wrapper, level);

		if (level < 2) row1.classList.add('inspector__row--expanded');else row1.classList.add('inspector__row--collapsed');
	});

	row2OpenArrow.innerText = '</';
	row2CloseArrow.innerText = '>';
	row2ElementTypeSpan.innerText = elem.localName;
	row2.appendChild(row2OpenArrow);
	row2.appendChild(row2ElementTypeSpan);
	row2.appendChild(row2CloseArrow);

	if (elem.children.length || elem.text && elem.text.length) wrapper.appendChild(row2);else row1.appendChild(row2);

	row1.addEventListener('click', function (e) {
		e.preventDefault();
		row1.classList.toggle('inspector__row--expanded');
		row1.classList.toggle('inspector__row--collapsed');
	}, false);

	parentEl.appendChild(wrapper);
};
exports.renderDOM = renderDOM;

},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.renderInspector = undefined;

var _render_dom = require('./render_dom.js');

var renderInspector = function renderInspector(body) {

	var inspectorDisplay = document.createElement('div');
	var level = 0;

	inspectorDisplay.id = 'inspector_display';
	inspectorDisplay.classList.add('inspector');
	body.appendChild(inspectorDisplay);
	(0, _render_dom.renderDOM)(body, inspectorDisplay, level);
}; /* render_inspector.js, v. 0.1.3, 29.03.2017, @ filip-swinarski */

exports.renderInspector = renderInspector;

},{"./render_dom.js":7}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
