(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _load_styles = require('./modules/load_styles.js');

var _render_inspector = require('./modules/render_inspector.js');

var _render_console = require('./modules/render_console.js');

var _render_browser_info = require('./modules/render_browser_info.js');

var _console_listen = require('./modules/console_listen.js');

var _dt_console_api = require('./modules/dt_console_api.js');

var DTConsole = _interopRequireWildcard(_dt_console_api);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/* main.js 0.1.1 30.03.2017 @ filip swinarski */

var body = document.body;
var container = document.createElement('div');

container.id = 'dev_tools';
container.classList.add('tools');
body.appendChild(container);
(0, _load_styles.loadStyles)();
(0, _render_inspector.renderInspector)(body, container);
(0, _render_console.renderConsole)(container);
(0, _render_browser_info.renderBrowserInfo)(container);

window.DTConsole = DTConsole;

},{"./modules/console_listen.js":2,"./modules/dt_console_api.js":4,"./modules/load_styles.js":5,"./modules/render_browser_info.js":6,"./modules/render_console.js":7,"./modules/render_inspector.js":10}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.consoleListen = undefined;

var _render_console = require('./render_console.js');

var _render_console_message = require('./render_console_message.js');

var consoleListen = function consoleListen() {

    window.addEventListener('error', function (error) {

        var row = document.createElement('div');
        var errorMessage = document.createElement('div');
        var errorMessageMsg = document.createElement('span');
        var errorSource = document.createElement('span');
        var errorLineNo = document.createElement('span');
        var errorColumnNo = document.createElement('span');
        var errorPrompt = document.createElement('span');

        row.classList.add('console__row');
        errorPrompt.classList.add('console__err-prompt');
        errorMessage.classList.add('console__msg-r');
        errorMessage.classList.add('console__msg-r--err');
        errorMessageMsg.classList.add('console__err-msg');
        errorSource.classList.add('console__err-src');
        errorLineNo.classList.add('console__err-lineno');
        errorColumnNo.classList.add('console__err-columnno');

        errorMessageMsg.innerHTML += error.message;
        errorSource.innerHTML += error.filename;
        errorLineNo.innerHTML += error.lineno;
        errorColumnNo.innerHTML += error.columnno;

        errorMessage.appendChild(errorPrompt);
        errorMessage.appendChild(errorMessageMsg);
        errorMessage.appendChild(errorSource);
        errorMessage.appendChild(errorLineNo);
        errorMessage.appendChild(errorColumnNo);
        row.appendChild(errorMessage);
        _render_console.consoleDisplay.appendChild(row);
    }, false);

    _render_console.consoleDisplay.addEventListener('log', function (e) {

        var row = document.createElement('div');

        row.innerHTML = (0, _render_console_message.renderConsoleMessage)(e.detail);
        row.classList.add('console__row');
        _render_console.consoleDisplay.appendChild(row);
    }, false);

    _render_console.consoleInput.addEventListener('keypress', function (e) {

        if (e.keyCode === 13) {

            var value = window.eval(_render_console.consoleInput.value); // window.eval to work only in global scope

            DTConsole.log(value, _render_console.consoleInput.value);
            _render_console.consoleInput.value = '';
        }
    });
}; /* console_listen.js, v. 0.1.3, 30.03.2017, @ filip-swinarski */

exports.consoleListen = consoleListen;

},{"./render_console.js":7,"./render_console_message.js":8}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.consoleLog = undefined;

var _render_console = require('./render_console.js');

var consoleLog = function consoleLog(str, value) {

	var log = new CustomEvent('log', { detail: [str, value] });

	_render_console.consoleDisplay.dispatchEvent(log);
}; /* console_log.js, v. 0.1.2, 30.03.2017, @ filip-swinarski */

exports.consoleLog = consoleLog;

},{"./render_console.js":7}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.log = undefined;

var _console_log = require('./console_log.js');

var log = function log(value) {
	var str = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

	(0, _console_log.consoleLog)(str, value);
}; /* dt_console_api.js, v. 0.1.2, 30.03.2017, @ filip-swinarski */

exports.log = log;

},{"./console_log.js":3}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
/* load _styles.js v. 0.1.0, 28.03.2017, @ filip-swinarski */

var loadStyles = function loadStyles() {

	var styles = document.createElement('link');

	styles.rel = 'stylesheet';
	styles.type = 'text/css';
	styles.media = 'screen';
	styles.href = './css/main.css';
	document.getElementsByTagName('head')[0].appendChild(styles);
};

exports.loadStyles = loadStyles;

},{}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/* render_browser_info.js, v. 0.1.0, 29.03.2017, @ filip-swinarski */

var renderBrowserInfo = function renderBrowserInfo(panel) {

    var browserInfoDisplay = document.createElement('div');
    var browserInfoContainer = document.createElement('div');

    browserInfoContainer.classList.add('browser');
    browserInfoContainer.classList.add('browser__panel');
    browserInfoDisplay.classList.add('browser__display');
    browserInfoDisplay.id = 'browser_display';
    browserInfoContainer.appendChild(browserInfoDisplay);
    panel.appendChild(browserInfoContainer);

    browserInfoDisplay.innerHTML += '<div>App name: ' + navigator.appCodeName + '</div>';
    browserInfoDisplay.innerHTML += '<div>App version: ' + navigator.appVersion + '</div>';
    browserInfoDisplay.innerHTML += '<div>Platform: ' + navigator.platform + '</div>';
    browserInfoDisplay.innerHTML += '<div>User agent: ' + navigator.userAgent + '</div>';
};

exports.renderBrowserInfo = renderBrowserInfo;

},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.consoleInput = exports.consoleDisplay = exports.renderConsole = undefined;

var _console_listen = require('./console_listen');

var consoleDisplay = document.createElement('div'); /* render_console.js, v. 0.1.2, 30.03.2017, @ filip-swinarski */

var consoleInput = document.createElement('input');
var consoleContainer = document.createElement('div');
var consoleInputPrompt = document.createElement('span');

consoleContainer.classList.add('console');
consoleContainer.classList.add('tools__panel');
consoleDisplay.classList.add('console__display');
consoleDisplay.id = 'console_display';
consoleInput.classList.add('console__input');
consoleInput.id = 'console_input';
consoleInput.type = 'text';
consoleInputPrompt.classList.add('console__prompt');

var renderConsole = function renderConsole(panel) {

	consoleContainer.appendChild(consoleInputPrompt);
	consoleContainer.appendChild(consoleDisplay);
	consoleContainer.appendChild(consoleInput);
	panel.appendChild(consoleContainer);
	(0, _console_listen.consoleListen)();
};

exports.renderConsole = renderConsole;
exports.consoleDisplay = consoleDisplay;
exports.consoleInput = consoleInput;

},{"./console_listen":2}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
/* render_console_message.js, v. 0.1.0, 30.03.2017, @ filip-swinarski */

var renderConsoleMessage = function renderConsoleMessage(msgArray) {

	var html = "";

	if (msgArray[0]) html += "<div class=\"console__msg-i\"><span class=\"console__msg-iprompt\"></span>" + msgArray[0] + " </div>";

	html += "<div class=\"console__msg-r\"><span class=\"console__msg-rprompt\"></span>" + msgArray[1] + "</div>";

	return html;
};

exports.renderConsoleMessage = renderConsoleMessage;

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
/* render_dom.js, v. 0.1.4, 29.03.2017, @ filip-swinarski */

var renderDOM = function renderDOM(elem, parentEl, level) {

	if (elem.id === 'inspector_display') return;

	var wrapper = document.createElement('div');
	var row1 = document.createElement('div');
	var row2 = elem.children.length ? document.createElement('div') : document.createElement('span');

	row1.classList.add('inspector__row');
	row1.classList.add('inspector__row--opening');

	row2.classList.add('inspector__row');
	row2.classList.add('inspector__row--closing');

	var row1ElementTypeSpan = document.createElement('span');
	var row1OpenArrow = document.createElement('span');
	var row1CloseArrow = document.createElement('span');
	var row2ElementTypeSpan = document.createElement('span');
	var row2OpenArrow = document.createElement('span');
	var row2CloseArrow = document.createElement('span');

	row1ElementTypeSpan.classList.add('inspector__tag-name');
	row2ElementTypeSpan.classList.add('inspector__tag-name');
	row1OpenArrow.innerText = '<';
	row1CloseArrow.innerText = '>';
	row1ElementTypeSpan.innerText = elem.localName;
	row1.appendChild(row1OpenArrow);
	row1.appendChild(row1ElementTypeSpan);

	if (elem.attributes.length) {
		[].slice.call(elem.attributes).forEach(function (attr) {

			var attrNameSpan = document.createElement('span');
			var attrEqualSpan = document.createElement('span');
			var attrValueSpan = document.createElement('span');

			attrNameSpan.classList.add('inspector__attr-name');
			attrValueSpan.classList.add('inspector__attr-value');
			attrNameSpan.innerText = ' ' + attr.localName;
			attrEqualSpan.innerText = '=';
			attrValueSpan.innerText = '"' + attr.value + '"';
			row1.appendChild(attrNameSpan);
			row1.appendChild(attrEqualSpan);
			row1.appendChild(attrValueSpan);
		});
	}

	row1.appendChild(row1CloseArrow);
	wrapper.appendChild(row1);
	wrapper.classList.add('inspector__exp');

	if (elem.text && elem.text.length) {

		var textEl = document.createElement('div');

		textEl.classList.add('inspector__exp');
		textEl.innerText = elem.text.trim();
		wrapper.appendChild(textEl);

		if (level < 2) row1.classList.add('inspector__row--expanded');else row1.classList.add('inspector__row--collapsed');
	}

	if (elem.children.length) level += 1;
	[].slice.call(elem.children).forEach(function (el) {
		renderDOM(el, wrapper, level);

		if (level < 2) row1.classList.add('inspector__row--expanded');else row1.classList.add('inspector__row--collapsed');
	});

	row2OpenArrow.innerText = '</';
	row2CloseArrow.innerText = '>';
	row2ElementTypeSpan.innerText = elem.localName;
	row2.appendChild(row2OpenArrow);
	row2.appendChild(row2ElementTypeSpan);
	row2.appendChild(row2CloseArrow);

	if (elem.children.length || elem.text && elem.text.length) wrapper.appendChild(row2);else row1.appendChild(row2);

	row1.addEventListener('click', function (e) {
		e.preventDefault();
		row1.classList.toggle('inspector__row--expanded');
		row1.classList.toggle('inspector__row--collapsed');
	}, false);

	parentEl.appendChild(wrapper);
};
exports.renderDOM = renderDOM;

},{}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.renderInspector = undefined;

var _render_dom = require('./render_dom.js');

var renderInspector = function renderInspector(body, panel) {

	var inspectorDisplay = document.createElement('div');
	var inspectorContainer = document.createElement('div');
	var level = 0;

	inspectorContainer.classList.add('inspector');
	inspectorContainer.classList.add('tools__panel');
	inspectorDisplay.classList.add('inspector__display');
	inspectorDisplay.id = 'inspector_display';
	inspectorContainer.appendChild(inspectorDisplay);
	panel.appendChild(inspectorContainer);
	(0, _render_dom.renderDOM)(body, inspectorDisplay, level);
}; /* render_inspector.js, v. 0.1.4, 29.03.2017, @ filip-swinarski */

exports.renderInspector = renderInspector;

},{"./render_dom.js":9}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
